VALUES
Some values are numbers, some values are pieces of text, some values are functions, and so on.



---NUMBERS--- 
JavaScript uses a fixed number of bits, 64 of them, to store a single number value. 

    NEGATIVE numbers 
    Those bits also store negative numbers, so one bit indicates the sign of the number. 

    DECIMAL numbers 
    A bigger issue is that nonwhole numbers must also be represented. To do this, some 
    of the bits are used to store the position of the decimal point. The actual maximum 
    whole number that can be stored is more in the range of 9 quadrillion (15 zeros)

    WHOLE numbers
    Calculations with whole numbers (also called integers) smaller than the aforementioned
    9 quadrillion are guaranteed to always be precise.

    FRACTIONAL numbers 
    We should treat fractional digital numbers as approximations, not as precise values.


ARITHMETIC 
Follow BODMAS rules and "Parentheses". Also use module(%) operator.


SPECIAL NUMBERS
    Infinity

    -Infinity

    Infinity - 1 is still Infinity, and so on. 

    Don’t put too much trust in infinity-based computation, though. 
    It isn’t mathematically sound, and it will quickly lead to the 
    next special number: NaN.


    NaN stands for “not a number”, even though it is a value of 
    the number type. You’ll get this result when you, 
    for example, 
    try to calculate 0 / 0 (zero divided by zero), 
    Infinity - Infinity, 
    or any number of other numeric operations that 
    don’t yield a meaningful result.



---STRINGS---
Strings, too, have to be modeled as a series of bits to be 
able to exist inside the computer. 
The way JavaScript does this is based on the Unicode standard.

    You can use single quotes, double quotes, or backticks to mark strings, 
    as long as the quotes at the start and the end of the string match.

    A quote that is preceded by a backslash will not end the string but 
    be part of it. When an n character occurs after a backslash, 
    it is interpreted as a newline. Similarly, a t after a backslash 
    \ means a tab character.

    If two backslashes follow each other, they will collapse together, 
    and only one will be left in the resulting string value.

    Strings written with single or double quotes behave very much the same
    —the only difference is in which type of quote you need to escape inside of them.


    FEATURE	          ||    SINGLE QUOTES	              DOUBLE QUOTES
    Escape characters ||	Not required	              Required
    Use in JSON	      ||    Not allowed	                  Required
    Common usage	  ||    Variables and expressions	  Literal text

    If you are not sure, it is always safe to use double quotes.


    Backtick-quoted strings, usually called template literals, can do a few more tricks. 
    Apart from being able to span lines, they can also embed other values.

    Code: `half of 100 is ${100 / 2}`;

    When you write something inside ${} in a template literal, its result will be computed, 
    converted to a string, and included at that position. 
    The example produces “half of 100 is 50”.


UNARY OPERATORS 
    1.typeof();
    2. - minus operator can be used as both unary and binary operator.


---BOOLEAN VALUES--- 
    console.log("Aardvark" < "Zoroaster")
    // → true

    When comparing strings, JavaScript goes over the characters from left to right, 
    comparing the Unicode codes one by one.

    console.log("Itchy" != "Scratchy")
    // → true
    console.log("Apple" == "Orange")
    // → false

    -----------------------------
    There is only one value in JavaScript that is not equal to itself, 
    and that is NaN (“not a number”).

    console.log(NaN == NaN)
    // → false

    NaN is supposed to denote the result of a nonsensical computation, 
    and as such, it isn’t equal to the result of any other nonsensical computations.
                                ----------------------------------



---LOGICAL OPERATORS---
    JavaScript supports three logical operators: and, or, and not. 
    These can be used to “reason” about Booleans.

    The && operator represents logical and. It is a binary operator, 
    and its result is true only if both the values given to it are true.
    console.log(true && false);
    // → false
    console.log(true && true);
    // → true


    The || operator denotes logical or. 
    It produces true if either of the values given to it is true.
    console.log(false || true);
    // → true
    console.log(false || false);
    // → false


    Not is written as an exclamation mark (!). It is a unary operator 
    that flips the value given to it—
    !true produces false, 
    and !false gives true.

    --OPERATOR PRECEDENCE--
        || has the lowest precedence, 
        then comes &&, 
        then the comparison operators (>, ==, and so on), 
        and then the rest.


    --TERNARY OPERATOR--
        This one is called the conditional operator (or sometimes just the ternary operator 
        since it is the only such operator in the language). The value on the left of the 
        question mark “picks” which of the other two values will come out. When it is true, 
        it chooses the middle value, and when it is false, it chooses the value on the right.

        console.log(true ? 1 : 2);
        // → 1
        console.log(false ? 1 : 2);
        // → 2


---EMPTY VALUES--- 
    There are two special values, written "null" and "undefined", 
    that are used to denote the absence of a meaningful value. 
    They are themselves values, but they carry no information.

    In cases where you actually have to concern yourself with these values, 
    I recommend treating them as mostly "INTERCHANGEABLE".


---AUTOMATIC TYPE COERCION---

    console.log(8 * null); // null becomes 0
    // → 0
    console.log("5" - 1); // "5" becomes number 5
    // → 4
    console.log("5" + 1); // number 1 becomes string "1" and is concatenated
    // → 51
    console.log("five" * 2);
    // → NaN
    console.log(false == 0);
    // → true


    When null or undefined occurs on either side of the operator, 
    it produces true only if both sides are one of null or undefined.
    console.log(null == undefined);
    // → true
    console.log(null == 0);
    // → false

    That behavior is often useful. When you want to test whether a 
    value has a real value instead of null or undefined, you can 
    compare it to null with the == (or !=) operator.



    Expressions like 0 == false and "" == false are also true because 
    of automatic type conversion. When you do not want any type 
    conversions to happen, there are two additional operators: 
    === and !==. 
    The first tests whether a value is precisely equal to the other, 
    and the second tests whether it is not precisely equal. 
    So "" === false is false as expected.

        I recommend using the three-character comparison 
        operators defensively to prevent unexpected type 
        conversions from tripping you up.
    
    Falsy values include false, 0, "" (empty string), null, undefined, 
    and NaN. All other values are considered truthy.


---Short-circuiting of logical operators---
    Another important property of these two operators(&&, ||) is that 
    the part to their right is evaluated only when necessary. 

    In the case of true || X, no matter what X is—even if it’s a piece 
    of program that does something terrible—the result will be true, 
    and X is never evaluated. 

    The same goes for false && X, which is false and will ignore X. 
    This is called "SHORT-CIRCUIT EVALUATION".

    The conditional operator works in a similar way. Of the second and third values, 
    only the one that is selected is evaluated.
        console.log(null || "user")
        // → user
        console.log("Agnes" || "user")
        // → Agnes




